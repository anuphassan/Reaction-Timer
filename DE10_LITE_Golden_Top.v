// ============================================================================
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| George Totolos    :| 08/22/2016:| Initial Revision
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
/*`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif*/

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

//press key 1 to start reaction test, press again to react when LED9 turns on. press the other key to reset the test any time during
//the test. To find the high score toggle switch 0. To reset the high score to 0, and reset the whole game, press and hold
//key 1 (react key) for a couple seconds, then press the reset key.
wire react,reset,downCount; //buttons and initializer
wire [4:0] stateOut; //state values from state machine
wire [11:0] waitTime; //random value for down counter
wire [11:0] BCD,highScore; //outputs to BCD decoders
wire dividedClock; //clock at 1 kHz
reg [11:0]switch; //last output that is muxed from BCD and highScore.

debouncer(MAX10_CLK1_50,KEY[0],reset); //debouncers for buttonss
debouncer(MAX10_CLK1_50,KEY[1],react);
clock_divider(MAX10_CLK1_50,dividedClock,reset); //divides clock to clock at speed of 1 kHz

stateMachine(MAX10_CLK1_50,react,reset,downCount,BCD,highScore,stateOut,LEDR[9]); //state machine, decides the state, and outputs to LED
LSRF(MAX10_CLK1_50,reset,waitTime,downcount); //creates random numbers that down counter latches too
Down_counter(waitTime,reset,stateOut[1],dividedClock,downCount,Q); //counts down a random amount of time to reaction state
//wait time for down counter is approxamitely 8-12 seconds, mostly around 10 and 11

BCD_counter(dividedClock,stateOut[0],stateOut[2],BCD[3:0],BCD[7:4],BCD[11:8]); //BCD counter, activates in reaction state, clears in idle

//assign LEDR[9] = reset;
//assign LEDR[8] = react;

always @(*) begin //mux to switch between high score and reaction test
	if(SW[0] == 0) begin
		switch = BCD;
	end else begin
		switch = highScore;
	end
end

BCD_decoder(switch[3:0],HEX0); //decoders fed directly to hex
BCD_decoder(switch[7:4],HEX1);
BCD_decoder(switch[11:8],HEX2);


//=======================================================
//  Structural coding
//=======================================================



endmodule
